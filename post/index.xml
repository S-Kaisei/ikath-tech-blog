<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ikath Tech Blog</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/</link><description>Recent content in Posts on Ikath Tech Blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2019, Weru and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sat, 24 Oct 2020 08:08:16 +0900</lastBuildDate><atom:link href="https://s-kaisei.github.io/Ikath-Tech-Blog/post/index.xml" rel="self" type="application/rss+xml"/><item><title>サイトをカスタマイズするためのノウハウ</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/more-newsroom/</link><pubDate>Sat, 24 Oct 2020 08:08:16 +0900</pubDate><guid>https://s-kaisei.github.io/Ikath-Tech-Blog/post/more-newsroom/</guid><description>Requirement Hugo × GitHub Pages でブログを公開するまでの手順を紹介 を終えている ​
画像・動画を表示する 画像は static/images に保存します。lightMode と darkMode で画像を切り替えることができます。特に気にしないのであれば同じでいいと思います。動画は youtube を公開できます。※ コードを書くと実際に画像や動画が表示されてしまうので便宜上スクリーンショットを利用させていただいてます。
コードブロックに番号をつける config.toml の 16行目と19行目を true に変更
1 2 guessSyntax = true lineNos = true なお、番号とコードを分割して表示したい場合は、20行目を true にします。
1 lineNumbersInTable = true また、上記の設定をした場合 22行目を 4 に設定した方がコードが見やすくなります。
1 tabWidth = 4 フッターにメニューを追加 data/ に menu.yml を追加する。
1 2 3 4 - item: About url: about/ - item: Blog url: post/ About を追加したいときは</description></item><item><title>画像を自動で Google Drive に保存する Line Bot を作成したので紹介</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/line-bot/</link><pubDate>Sat, 24 Oct 2020 06:29:56 +0900</pubDate><guid>https://s-kaisei.github.io/Ikath-Tech-Blog/post/line-bot/</guid><description>友人と連絡を取り合う時によく LINE を使うのですが、送信された画像をその時のイベントごとに自動で保存できたら便利だなと考え、line bot を作ることにしました。また、グループメンバーはみんな情報系出身のためコマンドライン風に実装してみました。
Requirement Line Developer の登録と使いかた Google Account の所持 ​
GAS (Google App Scripts) でコーディング GAS でコーディングをするときは、1つの Google Account のみでログインしていないとだめみたいです。複数アカウントでログインしている場合は一度全てのアカウントをログアウトさせてから対象となるアカウントでログインしましょう。
​
GAS を使用して bot を作成します。GAS で bot の処理を書き、その処理情報を webhook を通じて LINE Developer に送ります。
コードを書くためにスクリプトエディタを使いますが、後々スプレットシートも使うので、スプレットシートを通じてスクリプトエディタを開きます。スプレットシート -&amp;gt; ツール -&amp;gt; スクリプトエディタ で開けます。
​
コードと使い方 解説に入る前にソースコードと使い方を先に記述します。
var ACCESS_TOKEN = &amp;#39;&amp;lt;your-access-token&amp;gt;&amp;#39;; var MAIL_ADDRESS = [&amp;#39;&amp;lt;your-email&amp;gt;&amp;#39;] function doPost(e) { // WebHookで受信した応答用Token var replyToken = JSON.</description></item><item><title>自動走行するラジコンを作成</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/rcar/</link><pubDate>Sat, 24 Oct 2020 05:43:11 +0900</pubDate><guid>https://s-kaisei.github.io/Ikath-Tech-Blog/post/rcar/</guid><description>概要 Raspbeey Pi に学習させたモデルを搭載して、道路の左車線を自動で走行するラジコンカーです。今回は直線のみを対象にし、道路からはみ出さないように設計しました。見た目が戦車ですので、停止時に物体検出を行い自作砲台 (3Dプリンターで作成) を使って輪ゴムを発射するオプションも加えてみました。
[完成形]
[全体の流れのイメージ]
開発環境 Raspberry Pi 3B raspbian 9.4 Jupyter Notebook 4.4.0 Python 3.5.3 TensorFlow 1.11.0 OpenCV 3.4.4 行ったこと ラジコンの製作
これの組み立て Raspberry Piの環境構築
OS のインストール SSH の設定や IPアドレスの固定、その他必要なフレームワークのインストールなど 3Dプリンタの使用
砲台の作成 砲台やモータドライバを固定するための土台の作成 プログラミング(Python)
サーボモータ、DC モータによるラジコンの制御 CNN による画像の分類 Tiny-YOLOv3 を用いた物体検出 データセットの収集
前進、右折、左折の3クラスの画像 画像分類モデルの作成</description></item><item><title>Hugo × GitHub Pages でブログを公開するまでの手順を紹介</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/blog-introduce/</link><pubDate>Sat, 24 Oct 2020 05:35:42 +0900</pubDate><guid>https://s-kaisei.github.io/Ikath-Tech-Blog/post/blog-introduce/</guid><description>「自分が行なってきたことをアウトプットする場を作りたい」と前々から考えていましたので、この度 Hugo と GitHub Pages を使ってブログを公開することにしました。なぜ Hugo かというと友人 が強く勧めてくれたからです。ここ で多くを語ってくれているのでよろしければ一読ください。
​
Requirement macOS Catalina GitHub Account の所持: https://github.co.jp/ Homebrew: https://brew.sh/index_ja を前提に話を進めていきます。
​
Hugo のインストール homebrew を使って hugo をインストールします。
1 brew install hugo サイトの作成 &amp;ldquo;your site name&amp;rdquo; は任意です。 生成するとその名前のディレクトリができるので移動します。
1 2 hugo new site &amp;lt;your site name&amp;gt; cd &amp;lt;your site name&amp;gt; ディレクトリ構成は以下のようになってます。
1 2 3 4 5 6 7 8 &amp;lt;your site name&amp;gt; ├── archetypes/ ├── config.</description></item></channel></rss>