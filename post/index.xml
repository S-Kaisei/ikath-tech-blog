<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ikath Tech Blog</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/</link><description>Recent content in Posts on Ikath Tech Blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2019, Weru and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sun, 06 Dec 2020 11:01:54 +0900</lastBuildDate><atom:link href="https://s-kaisei.github.io/Ikath-Tech-Blog/post/index.xml" rel="self" type="application/rss+xml"/><item><title>solafune コンペ#1に参加しました</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/solafune-1/</link><pubDate>Sun, 06 Dec 2020 11:01:54 +0900</pubDate><guid>https://s-kaisei.github.io/Ikath-Tech-Blog/post/solafune-1/</guid><description>cf. @solafune (https://solafune.com)
solafune 主催のコンテスト#1 に参加しました。このコンテストで私がどのようなアプローチをとり、結果に対してどう考察したのかを紹介します。ちなみに、コンテストの結果は 8/118人 でした。本記事は参加していないとイマイチ理解し難い記事となっていることをご了承ください。(画像データ等が取り扱えないため)
　概要 衛生画像から空港利用者数を予測します。詳しくはこちら。
　始めにやったこと 始めに、それぞれの衛生画像に対して空港利用者数がどれくらいなのかを確認して考察しました。ここで気づいたのが、以下の二つです。
・ 空港が大きければ、利用者数も多い。
・ 空港の立地によって利用者数が異なる。森林が多いと少なく、海岸近くなら多い。
この二つの特徴をうまく数値化して、回帰分析すれば良い結果が出ないかなと考えました。ただ、これを適用する前に一旦定番の転移学習・ファインチューニングを試してみることにしました。
　転移学習・ファインチューニング+アルファ 基本的に多くの参加者が試したのではないでしょうか。画像があったら CNN の転移学習・ファインチューニングって感じですよね。私も実際に試してみました。最初は特に前処理・データ拡張等は行わず、ResNet と imagenet で事前に学習した重みを使って学習させました。結果としては、train data、validation data 共に誤差がとても大きく、テストとして一度提出してみるのも躊躇うレベルでした。ここで、なんで精度が悪かったのかを考えたとき、全体画像に対して空港が小さすぎるのが問題ではないかと考えました。なので、空港部分をクロップして新たなデータセットにすることにしました。幸いにも空港を中心として衛生写真が撮られていたので、中心から一定の大きさでクロップしました。ここでの結果は、クロップ前よりは精度が大幅に上がりましたが、いまいちパッとしない精度でした。一度テストとして提出してみましたが、スコアは 2.6 程度で当時では 20 位くらいでした。次に試したのは、事前学習させた重みを使わずにスクラッチで行ってみました。特徴抽出の仕方が一般的なのより異なっていたら精度に影響するかもしれないと考えたからです。すると、結果はそこそこ良くなり、テストデータに対しては、1.8 を記録しました。CNN に関するアプローチはここで終わりにしました。
​
NN による回帰分析 上の方にも書きましたが、空港の大きさと空港の立地を数値化して、説明変数として用いて回帰分析ができれば、精度が上がるのではないかと踏んでこちらを試してみることにしました。どのように数値化するのかが問題になってくるのですが、私はそれぞれ以下の方法を試してみることにしました。
・ セマンティックセグメンテーションによる空港の検出
・ エントロピー 計算による数値化
​
セマンティックセグメンテーションによる空港の検出 最初は画像処理技術をふんだんに使用して空港を検出しようと考えたのですが、白飛びしている画像等があり、なかなかうまくいきませんでした。なので、セマンティックセグメンテーションを使って空港を検出することにしました。セマンティックセグメンテーションの手法は DeepLabv3+ を使用しました。DeepLabv3 に関してなかなか独自のデータセットを使って学習する記事がなく、苦戦を強いられましたが、色々試行錯誤してなんとか学習まで行うことができました。validation data に対して検出を行ったところ、見た目ではあるのですが、かなり良い精度が出せていました。
​
エントロピー計算による数値化 エントロピーを使えば立地の数値化ができるのではないかと考えました。例えば、海のような同色の割合が多くある場所だとエントロピーは小さくなり、山や街並みが多く見える場所は複雑ゆえエントロピー値が大きくなります。
　この２つの値を説明変数として使用して、回帰分析を行いました。最初中間層のノード数を何も考えず 64 にしていたのですが、そのときの結果は、転移学習・ファインチューニングしたときの結果とほぼ同等でした。インプットデータ数が2つなのに中間層のノード数が 64 でいいのか疑問に感じ、4 に変更して試したところ結果は以下のようになりました。
　まとめ データを把握してからどのようにアプローチするかを決めて、実行に移しました。今回は、CNN の転移学習・ファインチューニングと NN による回帰分析を試し、結果的には後者が精度がよく採用しました。NN による回帰分析の方はあまり考察ができず、結果を詰めれなかったのが少し悔いですが、自分なりに考えを出し結果まで出すことができたので良かったです。今後も積極的にコンテストに参加したいと思います。以上です。お疲れ様でした。</description></item><item><title>DEV 主催の GitHub Actions Hackathon に参加してきました</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/dev-hackson/</link><pubDate>Sun, 06 Dec 2020 03:10:54 +0900</pubDate><guid>https://s-kaisei.github.io/Ikath-Tech-Blog/post/dev-hackson/</guid><description>タイトルにもある通り、DEV が主催した GitHub Actions hackathon に参加しましたので、備忘録として記事を書きたいと思います。
GitHib Actions とは GitHub Actions は GitHub のリポジトリ内でソフトウェア開発ワークフローを自動化することができるサービスです。(ここで、ソフトウェア開発ワークフローは、ビルド・テスト・デプロイなどが該当します。) ワークフローは、プッシュ、Issue、リリースなどの GitHub プラットフォームのイベントをトリガーとして起動することができます。GitHub Actions についてより詳しく知りたい方はこちらをどうぞ。
　Categories 本ハッカソンには、5つのカテゴリーがあり、それぞれ以下に示します。
・ Maintainer Must-Haves: 開発者のメンテナンスを楽にします
・ DIY Deployments: オープンソース・プロジェクトのデプロイメント・プロセスを改善します
・ Interesting IoT: IoT と連携させます
・ Phone Friendly: モバイル用に構築されたワークフロー (PWA、iOS/Android)・
・ Wacky Wildcards: 上記のカテゴリに当てはまらないもの (面白いもの)
Maintainer Must-Haves にエントリーしました。
　参加方法 ・ #ActionsHackathon タグを使用して、プロジェクトの進行状況を投稿します。
・ テンプレートに従ってワークフロー (.yml) やコードリポジトリを共有し、プロジェクトを DEV post に提出します。
・ 投稿の一部としてリポジトリを共有する場合は、プロジェクトにオープンソースライセンスと README が含むようにします。
　Workflow 今回作成した GitHub Actions は、関連もしくは類似する issue を提案する actions-suggest-related-links です。</description></item><item><title>newsroom テーマと HUGO を活用してサイトをカスタマイズ</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/more-newsroom/</link><pubDate>Sat, 24 Oct 2020 08:08:16 +0900</pubDate><guid>https://s-kaisei.github.io/Ikath-Tech-Blog/post/more-newsroom/</guid><description>Requirement ・ Hugo × GitHub Pages でブログを公開するまでの手順を紹介 を終えている
​
画像・動画を表示する 画像は static/images に保存します。lightMode と darkMode で画像を切り替えることができます。特に気にしないのであれば同じでいいと思います。動画は youtube を公開できます。※ コードを書くと実際に画像や動画が表示されてしまうので便宜上スクリーンショットを利用させていただいてます。
コードブロックに番号をつける config.toml の 16行目と19行目を true に変更
1 2 guessSyntax = true lineNos = true なお、番号とコードを分割して表示したい場合は、20行目を true にします。
1 lineNumbersInTable = true また、上記の設定をした場合 22行目を 4 に設定した方がコードが見やすくなります。
1 tabWidth = 4 フッターにメニューを追加 data/ に menu.yml を追加する。
1 2 3 4 - item: About url: about/ - item: Blog url: post/ About を追加したいときは</description></item><item><title>画像を自動で Google Drive に保存する Line Bot を作成したので紹介</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/line-bot/</link><pubDate>Sat, 24 Oct 2020 06:29:56 +0900</pubDate><guid>https://s-kaisei.github.io/Ikath-Tech-Blog/post/line-bot/</guid><description>友人と連絡を取り合う時によく LINE を使うのですが、送信された画像をその時のイベントごとに自動で保存できたら便利だなと考え、line bot を作ることにしました。また、グループメンバーはみんな情報系出身のためコマンドライン風に実装してみました。
Requirement ・ Line Developer の登録と使いかた
・ Google Account の所持
​
GAS (Google App Scripts) でコーディング GAS でコーディングをするときは、1つの Google Account のみでログインしていないとだめみたいです。複数アカウントでログインしている場合は一度全てのアカウントをログアウトさせてから対象となるアカウントでログインしましょう。
​
GAS を使用して bot を作成します。GAS で bot の処理を書き、その処理情報を webhook を通じて LINE Developer に送ります。
コードを書くためにスクリプトエディタを使いますが、後々スプレットシートも使うので、スプレットシートを通じてスクリプトエディタを開きます。スプレットシート -&amp;gt; ツール -&amp;gt; スクリプトエディタ で開けます。
​
コードと使い方 解説に入る前にソースコードと使い方を先に記述します。
var ACCESS_TOKEN = &amp;#39;&amp;lt;your-access-token&amp;gt;&amp;#39;; var MAIL_ADDRESS = [&amp;#39;&amp;lt;your-email&amp;gt;&amp;#39;] function doPost(e) { // WebHookで受信した応答用Token var replyToken = JSON.</description></item><item><title>自動走行するラジコンを作成</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/rcar/</link><pubDate>Sat, 24 Oct 2020 05:43:11 +0900</pubDate><guid>https://s-kaisei.github.io/Ikath-Tech-Blog/post/rcar/</guid><description>概要 Raspbeey Pi に学習させたモデルを搭載して、道路の左車線を自動で走行するラジコンカーです。今回は直線のみを対象にし、道路からはみ出さないように設計しました。見た目が戦車ですので、停止時に物体検出を行い自作砲台 (3Dプリンターで作成) を使って輪ゴムを発射するオプションも加えてみました。
[完成形]
[全体の流れのイメージ]
開発環境 ・ Raspberry Pi 3B raspbian 9.4
・ Jupyter Notebook 4.4.0
・ Python 3.5.3
・ TensorFlow 1.11.0
・ OpenCV 3.4.4
行ったこと ラジコンの製作
・ これの組み立て
Raspberry Piの環境構築
・ OS のインストール
・ SSH の設定や IPアドレスの固定、その他必要なフレームワークのインストールなど
3Dプリンタの使用
・ 砲台の作成
・ 砲台やモータドライバを固定するための土台の作成
プログラミング(Python)
・ サーボモータ、DC モータによるラジコンの制御
・ CNN による画像の分類
・ Tiny-YOLOv3 を用いた物体検出
データセットの収集
・ 前進、右折、左折の3クラスの画像</description></item><item><title>Hugo × GitHub Pages でブログを公開するまでの手順を紹介</title><link>https://s-kaisei.github.io/Ikath-Tech-Blog/post/blog-introduce/</link><pubDate>Sat, 24 Oct 2020 05:35:42 +0900</pubDate><guid>https://s-kaisei.github.io/Ikath-Tech-Blog/post/blog-introduce/</guid><description>「自分が行なってきたことをアウトプットする場を作りたい」と前々から考えていましたので、この度 Hugo と GitHub Pages を使ってブログを公開することにしました。なぜ Hugo かというと友人 が強く勧めてくれたからです。ここ で多くを語ってくれているのでよろしければ一読ください。
​
Requirement ・ macOS Catalina
・ GitHub Account の所持: https://github.co.jp/
・ Homebrew: https://brew.sh/index_ja
を前提に話を進めていきます。
​
Hugo のインストール homebrew を使って hugo をインストールします。
1 brew install hugo サイトの作成 &amp;ldquo;your site name&amp;rdquo; は任意です。 生成するとその名前のディレクトリができるので移動します。
1 2 hugo new site &amp;lt;your site name&amp;gt; cd &amp;lt;your site name&amp;gt; ディレクトリ構成は以下のようになってます。
1 2 3 4 5 6 7 8 &amp;lt;your site name&amp;gt; ├── archetypes/ ├── config.</description></item></channel></rss>